// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Domain extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Domain entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Domain entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Domain", id.toString(), this);
  }

  static load(id: string): Domain | null {
    return store.get("Domain", id) as Domain | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get labelName(): string | null {
    let value = this.get("labelName");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set labelName(value: string | null) {
    if (value === null) {
      this.unset("labelName");
    } else {
      this.set("labelName", Value.fromString(value as string));
    }
  }

  get labelhash(): Bytes | null {
    let value = this.get("labelhash");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set labelhash(value: Bytes | null) {
    if (value === null) {
      this.unset("labelhash");
    } else {
      this.set("labelhash", Value.fromBytes(value as Bytes));
    }
  }

  get parent(): string | null {
    let value = this.get("parent");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parent(value: string | null) {
    if (value === null) {
      this.unset("parent");
    } else {
      this.set("parent", Value.fromString(value as string));
    }
  }

  get subdomains(): Array<string> {
    let value = this.get("subdomains");
    return value.toStringArray();
  }

  set subdomains(value: Array<string>) {
    this.set("subdomains", Value.fromStringArray(value));
  }

  get resolvedAddress(): string | null {
    let value = this.get("resolvedAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set resolvedAddress(value: string | null) {
    if (value === null) {
      this.unset("resolvedAddress");
    } else {
      this.set("resolvedAddress", Value.fromString(value as string));
    }
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get resolver(): string | null {
    let value = this.get("resolver");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set resolver(value: string | null) {
    if (value === null) {
      this.unset("resolver");
    } else {
      this.set("resolver", Value.fromString(value as string));
    }
  }

  get ttl(): BigInt | null {
    let value = this.get("ttl");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ttl(value: BigInt | null) {
    if (value === null) {
      this.unset("ttl");
    } else {
      this.set("ttl", Value.fromBigInt(value as BigInt));
    }
  }

  get isMigrated(): boolean {
    let value = this.get("isMigrated");
    return value.toBoolean();
  }

  set isMigrated(value: boolean) {
    this.set("isMigrated", Value.fromBoolean(value));
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transfer", id.toString(), this);
  }

  static load(id: string): Transfer | null {
    return store.get("Transfer", id) as Transfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    return value.toString();
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class NewOwner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NewOwner entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewOwner entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewOwner", id.toString(), this);
  }

  static load(id: string): NewOwner | null {
    return store.get("NewOwner", id) as NewOwner | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    return value.toString();
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class NewResolver extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NewResolver entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewResolver entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewResolver", id.toString(), this);
  }

  static load(id: string): NewResolver | null {
    return store.get("NewResolver", id) as NewResolver | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    return value.toString();
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    return value.toString();
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }
}

export class NewTTL extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NewTTL entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewTTL entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewTTL", id.toString(), this);
  }

  static load(id: string): NewTTL | null {
    return store.get("NewTTL", id) as NewTTL | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    return value.toString();
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get ttl(): BigInt {
    let value = this.get("ttl");
    return value.toBigInt();
  }

  set ttl(value: BigInt) {
    this.set("ttl", Value.fromBigInt(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Account entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Account entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Account", id.toString(), this);
  }

  static load(id: string): Account | null {
    return store.get("Account", id) as Account | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domains(): Array<string> {
    let value = this.get("domains");
    return value.toStringArray();
  }

  set domains(value: Array<string>) {
    this.set("domains", Value.fromStringArray(value));
  }

  get deeds(): Array<string> {
    let value = this.get("deeds");
    return value.toStringArray();
  }

  set deeds(value: Array<string>) {
    this.set("deeds", Value.fromStringArray(value));
  }

  get registrations(): Array<string> | null {
    let value = this.get("registrations");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set registrations(value: Array<string> | null) {
    if (value === null) {
      this.unset("registrations");
    } else {
      this.set("registrations", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Deed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Deed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Deed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Deed", id.toString(), this);
  }

  static load(id: string): Deed | null {
    return store.get("Deed", id) as Deed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }
}

export class AuctionedName extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AuctionedName entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AuctionedName entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AuctionedName", id.toString(), this);
  }

  static load(id: string): AuctionedName | null {
    return store.get("AuctionedName", id) as AuctionedName | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string | null {
    let value = this.get("domain");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set domain(value: string | null) {
    if (value === null) {
      this.unset("domain");
    } else {
      this.set("domain", Value.fromString(value as string));
    }
  }

  get registrationDate(): BigInt {
    let value = this.get("registrationDate");
    return value.toBigInt();
  }

  set registrationDate(value: BigInt) {
    this.set("registrationDate", Value.fromBigInt(value));
  }

  get releaseDate(): BigInt | null {
    let value = this.get("releaseDate");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set releaseDate(value: BigInt | null) {
    if (value === null) {
      this.unset("releaseDate");
    } else {
      this.set("releaseDate", Value.fromBigInt(value as BigInt));
    }
  }

  get deed(): string | null {
    let value = this.get("deed");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deed(value: string | null) {
    if (value === null) {
      this.unset("deed");
    } else {
      this.set("deed", Value.fromString(value as string));
    }
  }

  get secondBid(): BigInt | null {
    let value = this.get("secondBid");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set secondBid(value: BigInt | null) {
    if (value === null) {
      this.unset("secondBid");
    } else {
      this.set("secondBid", Value.fromBigInt(value as BigInt));
    }
  }

  get bidCount(): i32 {
    let value = this.get("bidCount");
    return value.toI32();
  }

  set bidCount(value: i32) {
    this.set("bidCount", Value.fromI32(value));
  }

  get state(): string {
    let value = this.get("state");
    return value.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }
}

export class Registration extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Registration entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Registration entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Registration", id.toString(), this);
  }

  static load(id: string): Registration | null {
    return store.get("Registration", id) as Registration | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string | null {
    let value = this.get("domain");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set domain(value: string | null) {
    if (value === null) {
      this.unset("domain");
    } else {
      this.set("domain", Value.fromString(value as string));
    }
  }

  get registrationDate(): BigInt {
    let value = this.get("registrationDate");
    return value.toBigInt();
  }

  set registrationDate(value: BigInt) {
    this.set("registrationDate", Value.fromBigInt(value));
  }

  get expiryDate(): BigInt {
    let value = this.get("expiryDate");
    return value.toBigInt();
  }

  set expiryDate(value: BigInt) {
    this.set("expiryDate", Value.fromBigInt(value));
  }

  get registrant(): string {
    let value = this.get("registrant");
    return value.toString();
  }

  set registrant(value: string) {
    this.set("registrant", Value.fromString(value));
  }
}

export class Resolver extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Resolver entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Resolver entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Resolver", id.toString(), this);
  }

  static load(id: string): Resolver | null {
    return store.get("Resolver", id) as Resolver | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    return value.toString();
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get addr(): string | null {
    let value = this.get("addr");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set addr(value: string | null) {
    if (value === null) {
      this.unset("addr");
    } else {
      this.set("addr", Value.fromString(value as string));
    }
  }

  get texts(): Array<string> | null {
    let value = this.get("texts");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set texts(value: Array<string> | null) {
    if (value === null) {
      this.unset("texts");
    } else {
      this.set("texts", Value.fromStringArray(value as Array<string>));
    }
  }

  get coinTypes(): Array<i32> | null {
    let value = this.get("coinTypes");
    if (value === null) {
      return null;
    } else {
      return value.toI32Array();
    }
  }

  set coinTypes(value: Array<i32> | null) {
    if (value === null) {
      this.unset("coinTypes");
    } else {
      this.set("coinTypes", Value.fromI32Array(value as Array<i32>));
    }
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}
